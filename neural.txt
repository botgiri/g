Neural Style Transfer using TensorFlow

# Import required libraries
import os
import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import PIL.Image
import time
import functools
import IPython.display as display

# Set environment to load compressed models from TensorFlow Hub
os.environ['TFHUB_MODEL_LOAD_FORMAT'] = 'COMPRESSED'

# Configure matplotlib for better image display
mpl.rcParams['figure.figsize'] = (12, 12)
mpl.rcParams['axes.grid'] = False

# Function to convert a tensor (output from the model) to a PIL image
def tensor_to_image(tensor):
    tensor = tensor * 255  # Convert pixel values from [0,1] to [0,255]
    tensor = np.array(tensor, dtype=np.uint8)
    if np.ndim(tensor) > 3:
        tensor = tensor[0]  # Remove batch dimension if it exists
    return PIL.Image.fromarray(tensor)

# Download a sample content image
content_path = tf.keras.utils.get_file(
    'YellowLabradorLooking_new.jpg',
    'https://storage.googleapis.com/download.tensorflow.org/example_images/YellowLabradorLooking_new.jpg'
)

# Download a sample style image
style_path = tf.keras.utils.get_file(
    'kandinsky5.jpg',
    'https://storage.googleapis.com/download.tensorflow.org/example_images/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg'
)

# Function to load and resize images while maintaining aspect ratio
def load_img(path_to_img): 
    max_dim = 512  # Limit image size for faster processing
    img = tf.io.read_file(path_to_img)  # Read image file
    img = tf.image.decode_image(img, channels=3)  # Decode to RGB
    img = tf.image.convert_image_dtype(img, tf.float32)  # Convert to float
    shape = tf.cast(tf.shape(img)[:-1], tf.float32)  # Get original size
    scale = max_dim / max(shape)  # Compute scaling factor
    new_shape = tf.cast(shape * scale, tf.int32)  # Resize dimensions
    img = tf.image.resize(img, new_shape)  # Resize image
    img = img[tf.newaxis, :]  # Add batch dimension
    return img

# Display function for TensorFlow images
def imshow(image, title=None): 
    if len(image.shape) > 3:
        image = tf.squeeze(image, axis=0)  # Remove batch dimension
    plt.imshow(image)
    if title:
        plt.title(title)

# Load and show content and style images
content_image = load_img(content_path)
style_image = load_img(style_path)
plt.subplot(1, 2, 1)
imshow(content_image, 'Content Image')
plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')

# Import TensorFlow Hub and load the pre-trained style transfer model
import tensorflow_hub as hub
hub_model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# Generate stylized image (content + style)
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]

# Convert the output tensor to an image and display it
tensor_to_image(stylized_image)


# Load new content and style images
content_path = tf.keras.utils.get_file(
     '832vtw88y4v11.jpg',
    'https://i.redd.it/832vtw88y4v11.jpg'
)

style_path = tf.keras.utils.get_file(
    'kandinsky5.jpg',
    'https://storage.googleapis.com/download.tensorflow.org/example_images/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg'
)

# Load and display them
content_image = load_img(content_path)
style_image = load_img(style_path)
plt.subplot(1, 2, 1)
imshow(content_image, 'Content Image')
plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')

# Stylize the new content image using the same model
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]
tensor_to_image(stylized_image)


# Load a third content image
content3_path = tf.keras.utils.get_file(
    'th.jpg',
    'https://tse3.mm.bing.net/th?id=OIP.jk_RwdxMWeBv5Sq1VTS2jAHaHa&pid=Api&P=0&h=180'
)

style_path = tf.keras.utils.get_file(
    '832vtw88y4v11.jpg',
    'https://i.redd.it/832vtw88y4v11.jpg'
)

# Load and show content and style images
content_image = load_img(content_path)
style_image = load_img(style_path)
plt.subplot(1, 2, 1)
imshow(content_image, 'Content 1 Image')
plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')

# Stylize the image
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]
result_image = tensor_to_image(stylized_image)
result_image

# Load third content image and stylize it using previously stylized image
content3_image = load_img(content3_path)
imshow(content3_image, 'Content3 Image')

# Apply second level of stylization
stylized_image_2 = hub_model(tf.constant(content3_image), tf.constant(stylized_image))[0]
final_result_image = tensor_to_image(stylized_image_2)
final_result_image
